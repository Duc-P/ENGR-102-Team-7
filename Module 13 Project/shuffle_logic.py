import random
import time

#################################
### marble starts at left box ###
#################################

def ltr_cw(arr,total):
    '''
    move marble left to right, clockwise

    Returns
    -------
    None.

    '''
    print("ltr_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[0] = False
    arr[2] = True
    print(arr)
    
    shuffle_int = random.randint(9,12)
    if shuffle_int == 9:
        rtl_cw(arr,total)
    elif shuffle_int == 10:
        rtl_cc(arr,total)
    elif shuffle_int == 11:
        rtm_cw(arr, total)
    elif shuffle_int == 12:
        rtm_cc(arr, total)
        
    # call designated visual function
    return None

def ltr_cc(arr,total):
    '''
    move marble left to right, counterclockwise

    Returns
    -------
    None.

    '''
    print("ltr_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[0] = False
    arr[2] = True
    print(arr)
    
    shuffle_int = random.randint(9,12)
    if shuffle_int == 9:
        rtl_cw(arr,total)
    elif shuffle_int == 10:
        rtl_cc(arr,total)
    elif shuffle_int == 11:
        rtm_cw(arr, total)
    elif shuffle_int == 12:
        rtm_cc(arr, total)
        
    # call designated visual function
    return None

def ltm_cw(arr,total):
    '''
    mover marble left to middle, clockwise

    Returns
    -------
    None.

    '''
    print("ltm_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[0] = False
    arr[1] = True
    print(arr)
    
    shuffle_int = random.randint(5,8)
    
    if shuffle_int == 5:
        mtr_cw(arr,total)
    elif shuffle_int == 6:
        mtr_cc(arr,total)
    elif shuffle_int == 7:
        mtl_cw(arr, total)
    elif shuffle_int == 8:
        mtl_cc(arr, total)
    
    # call designated visual function
    return None

def ltm_cc(arr,total):
    '''
    mover marble left to middle, counterclockwise

    Returns
    -------
    None.

    '''
    print("ltm_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[0] = False
    arr[1] = True
    print(arr)
    
    shuffle_int = random.randint(5,8)
    
    if shuffle_int == 5:
        mtr_cw(arr,total)
    elif shuffle_int == 6:
        mtr_cc(arr,total)
    elif shuffle_int == 7:
        mtl_cw(arr, total)
    elif shuffle_int == 8:
        mtl_cc(arr, total)
    
    # call designated visual function
    return None

###################################
### marble starts at middle box ###
###################################

def mtr_cw(arr,total):
    '''
    move marble middle to right, clockwise

    Returns
    -------
    None.

    '''
    print("mtr_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[1] = False
    arr[2] = True
    print(arr)
    
    shuffle_int = random.randint(9,12)
    if shuffle_int == 9:
        rtl_cw(arr,total)
    elif shuffle_int == 10:
        rtl_cc(arr,total)
    elif shuffle_int == 11:
        rtm_cw(arr, total)
    elif shuffle_int == 12:
        rtm_cc(arr, total)
        
    # call designated visual function
    return None

def mtr_cc(arr,total):
    '''
    move marble middle to right, counterclockwise

    Returns
    -------
    None.

    '''
    print("mtr_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[1] = False
    arr[2] = True
    print(arr)
    
    shuffle_int = random.randint(9,12)
    if shuffle_int == 9:
        rtl_cw(arr,total)
    elif shuffle_int == 10:
        rtl_cc(arr,total)
    elif shuffle_int == 11:
        rtm_cw(arr, total)
    elif shuffle_int == 12:
        rtm_cc(arr, total)
        
    # call designated visual function
    return None

def mtl_cw(arr,total):
    '''
    move marble middle to left, clockwise

    Returns
    -------
    None.

    '''
    print("mtl_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[1] = False
    arr[0] = True
    print(arr)
    
    shuffle_int = random.randint(1,4)# initial shuffle randomly generated by computer
    
    if shuffle_int == 1:
        ltr_cw(arr,total)
    elif shuffle_int == 2:
        ltr_cc(arr,total)
    elif shuffle_int == 3:
        ltm_cw(arr, total)
    elif shuffle_int == 4:
        ltm_cc(arr, total)
    
    # call designated visual function
    return None

def mtl_cc(arr,total):
    '''
    move marble middle to left, counterclockwise

    Returns
    -------
    None.

    '''
    print("mtl_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[1] = False
    arr[0] = True
    print(arr)
    
    shuffle_int = random.randint(1,4)# initial shuffle randomly generated by computer
    
    if shuffle_int == 1:
        ltr_cw(arr,total)
    elif shuffle_int == 2:
        ltr_cc(arr,total)
    elif shuffle_int == 3:
        ltm_cw(arr, total)
    elif shuffle_int == 4:
        ltm_cc(arr, total)
    
    # call designated visual function
    return None

##################################
### marble starts at right box ###
##################################

def rtl_cw(arr,total):
    '''
    move marble right to left, clockwise

    Returns
    -------
    None.

    '''
    print("rtl_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[2] = False
    arr[0] = True
    print(arr)
    
    shuffle_int = random.randint(1,4)# initial shuffle randomly generated by computer
    
    if shuffle_int == 1:
        ltr_cw(arr,total)
    elif shuffle_int == 2:
        ltr_cc(arr,total)
    elif shuffle_int == 3:
        ltm_cw(arr, total)
    elif shuffle_int == 4:
        ltm_cc(arr, total)
    
    # call designated visual function
    return None

def rtl_cc(arr,total):
    '''
    move marble right to left, counterclockwise

    Returns
    -------
    None.

    '''
    print("rtl_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[2] = False
    arr[0] = True
    print(arr)
    
    shuffle_int = random.randint(1,4)# initial shuffle randomly generated by computer
    
    if shuffle_int == 1:
        ltr_cw(arr,total)
    elif shuffle_int == 2:
        ltr_cc(arr,total)
    elif shuffle_int == 3:
        ltm_cw(arr, total)
    elif shuffle_int == 4:
        ltm_cc(arr, total)
    
    # call designated visual function
    return None

def rtm_cw(arr,total):
    '''
    move marble right to middle, clockwise

    Returns
    -------
    None.

    '''
    print("rtm_cw called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None
    
    # swap!
    arr[2] = False
    arr[1] = True
    print(arr)
    
    shuffle_int = random.randint(5,8)
    
    if shuffle_int == 5:
        mtr_cw(arr,total)
    elif shuffle_int == 6:
        mtr_cc(arr,total)
    elif shuffle_int == 7:
        mtl_cw(arr, total)
    elif shuffle_int == 8:
        mtl_cc(arr, total)
    
    # call designated visual function
    return None

def rtm_cc(arr,total):
    '''
    move marble right to middle, counterclockwise

    Returns
    -------
    None.

    '''
    print("rtm_cc called")
    total -= 1
    
    if total == 0:
        guess_marble(arr)
        return None

    arr[2] = False
    arr[1] = True
    print(arr)
    
    shuffle_int = random.randint(5,8)
    
    if shuffle_int == 5:
        mtr_cw(arr,total)
    elif shuffle_int == 6:
        mtr_cc(arr,total)
    elif shuffle_int == 7:
        mtl_cw(arr, total)
    elif shuffle_int == 8:
        mtl_cc(arr, total)
    
    # call designated visual function
    return None

##########################################

def place_marble(pm_i_m_index,pm_s_total):
    '''
    initialize by the player once per round.
    call the first random logical shuffle sequence.

    Returns
    -------
    arrangement : list
        current arrangement of the shells (containing and not containing marble)

    '''

    if pm_i_m_index == 0: # player place marble in left shell
        print("category L")
        arrangement = [True, False, False]
        print("og arrangement:\n",arrangement)
        shuffle_int = random.randint(1,4)# initial shuffle randomly generated by computer
        
        if shuffle_int == 1:
            ltr_cw(arrangement,pm_s_total)
        elif shuffle_int == 2:
            ltr_cc(arrangement,pm_s_total)
        elif shuffle_int == 3:
            ltm_cw(arrangement, pm_s_total)
        elif shuffle_int == 4:
            ltm_cc(arrangement, pm_s_total)
                
    elif pm_i_m_index == 1:
        print("catergory M")
        arrangement = [False, True, False]
        print("og arrangement:\n",arrangement)
        shuffle_int = random.randint(5,8)
        
        if shuffle_int == 5:
            mtr_cw(arrangement,pm_s_total)
        elif shuffle_int == 6:
            mtr_cc(arrangement,pm_s_total)
        elif shuffle_int == 7:
            mtl_cw(arrangement, pm_s_total)
        elif shuffle_int == 8:
            mtl_cc(arrangement, pm_s_total)
        
    elif pm_i_m_index == 2:
        print("category R")
        arrangement = [False, False, True]
        print("og arrangement:\n",arrangement)
        shuffle_int = random.randint(9,12)

        if shuffle_int == 9:
            rtl_cw(arrangement,pm_s_total)
        elif shuffle_int == 10:
            rtl_cc(arrangement,pm_s_total)
        elif shuffle_int == 11:
            rtm_cw(arrangement, pm_s_total)
        elif shuffle_int == 12:
            rtm_cc(arrangement, pm_s_total)


def guess_marble(arr):
    return None


### variable presets ###
difficulty = 1 # use to scale various dynamics of the game

# get the index of the box the player choose
# enable mouse input # saved as user text input for now [0,1,2]

arrangement = [None, None, None] # set up of the three shells
initial_m_index = random.randint(0, 2) #input("pick the box you want to place the marble in: ")
shuffle_total   = random.randint(1, difficulty*5) # random total of time we are shuffling

print("inital marble placement",initial_m_index)
print("total # shuffle",shuffle_total)

place_marble(initial_m_index, shuffle_total)






























